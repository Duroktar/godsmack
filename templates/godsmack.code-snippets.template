{
	"Controller": {
    "prefix": "gs-controller",
    "description": "Tsoa Controller Template",
    "body": [
      "import { http, Singleton, LogFactory, SettingsService } from '@trabpukcip/godsmack';",
      "import { Controller, Post, Route, SuccessResponse, Tags, Example } from 'tsoa';",
      "const { StatusCode } = http;",
      "",
      "type $6 = {}",
      "",
      "@Route('$1')",
      "@Tags('$2')",
      "@Singleton()",
      "export class $3Controller extends Controller {",
      "  constructor(",
      "    private logger: LogFactory,",
      "    private settings: SettingsService,",
      "  ) {",
      "    super()",
      "    this.logger = logger.For(this)",
      "  }",
      "",
      "  @SuccessResponse(StatusCode.OK, \"Ok\")",
      "  @Post('$4')",
      "  public async $5(): Promise<$6> {",
      "    return {} as $6",
      "  }",
      "}",
      ""
    ]
  },
	"Resolver": {
    "prefix": "gs-resolver",
    "description": "GraphQL Resolver Template",
    "body": [
      "import { TypeGraphQL } from \"@trabpukcip/godsmack/dist/framework/graphql/TypeGraphQlProvider\";",
      "import { ResourceNotFoundError } from '../errors';",
      "const { Arg, Authorized, Query, Resolver } = TypeGraphQL;",
      "",
      "@Resolver($2)",
      "export class $2Resolver {",
      "  constructor(private database: $3) {}",
      "",
      "  @Query(returns => [$2])",
      "  $1s(",
      "    @Arg('skip') skip: number,",
      "    @Arg('take') take: number,",
      "  ): Promise<$2[]> {",
      "    return this.database.$1s.findMany({ skip, take });",
      "  }",
      "",
      "  @Query(returns => $2)",
      "  @Authorized()",
      "  async $1(@Arg(\"id\") id: ${4|string,number|}): Promise<$2> {",
      "    const result = await this.database.$1s.findByPK(id);",
      "    if (result === undefined) {",
      "      throw new ResourceNotFoundError(`Id: \\${id}`);",
      "    }",
      "    return result;",
      "  }",
      "}",
      ""
    ]
  },
  "Task": {
    "prefix": "gs-task",
    "description": "Godsmack Cron Job Template",
    "body": [
      "import { ICronTrigger, DatabaseProvider, Singleton, LogFactory } from '@trabpukcip/godsmack'",
      "",
      "@Singleton()",
      "export class $1Job implements ICronTrigger {",
      "  constructor(",
      "    public logger: LogFactory,",
      "    public db: DatabaseProvider,",
      "  ) {",
      "    this.logger = logger.For(this)",
      "  }",
      "",
      "  public $2 = async (): Promise<void> => {",
      "  }",
      "",
      "  public readonly cronTime: string = \"${3|0 22 * * * *|}\"",
      "}",
      ""
    ]
  }
}