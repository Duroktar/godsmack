import { LogFactory, SettingsService } from "@trabpukcip/godsmack";
import { TypeGraphQL } from "@trabpukcip/godsmack/dist/framework/graphql/TypeGraphQlProvider";
const { Field, Query, Resolver, ObjectType } = TypeGraphQL;

@ObjectType()
class Health {
  @Field()
  ServerId!: string;
  @Field()
  Status!: string;
  @Field()
  ServerTime!: Date;
}

@Resolver(Health)
export class HealthResolver {
  constructor(
    private logger: LogFactory,
    private settings: SettingsService,
  ) {
    this.logger = logger.For(this)
  }

  @Query(type => Health)
  async serverHealth(): Promise<Health> {
    const { host, port, https } = this.settings.get('httpServer');
    const protocol = https ? 'https' : 'http';
    const serverId = protocol + '://' + host + ':' + port + '/' + process.pid;
    return { ServerId: serverId, Status: "OK", ServerTime: new Date() };
  }
}
