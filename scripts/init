#!/usr/bin/env node
const {spawnSync} = require('child_process');
const {prompt} = require('enquirer');
const {readFileSync} = require('fs');
const {join, basename, resolve} = require('path');
const {Container} = require('../build/index.js')
const {DirectoryBuilder} = require('../build/services/template/DirectoryBuilder.js')
const {TemplateSystem} = require('../build/services/template/TemplateSystem.js')
const ora = require('ora');

main().finally()

async function main() {
  const model = await prompt([
    {
      type: 'input',
      name: 'packageName',
      message: 'Project Name',
      default: basename(resolve(process.cwd())).toLowerCase(),
    },
    {
      type: 'input',
      name: 'packageVersion',
      message: 'Project Version',
      default: '0.0.1'
    },
    {
      type: 'input',
      name: 'packageLicense',
      message: 'Project License',
      default: 'MIT'
    },
    {
      type: 'confirm',
      name: 'addDockerSupport',
      message: 'Add Docker Support?'
    },
    {
      type: 'confirm',
      name: 'addDockerDBSupport',
      message: 'Add Docker Database Support?'
    },
    {
      type: 'confirm',
      name: 'usePostgresDb',
      message: 'Add Postgres Database Support?'
    },
    {
      type: 'input',
      name: 'baseServerDir',
      message: 'Base directory for server code?',
      default: 'server'
    },
  ]);

  const system = new Container()
    .addSingleton(TemplateSystem)
    .resolve(TemplateSystem)

  const spec = new DirectoryBuilder()
    .mkDir(model.baseServerDir, dir => dir
      .touch('app.ts',  loadTemplate('app.ts'))
      .touch('main.ts', loadTemplate('main.ts'))
    )
    .touch('.editorconfig', loadTemplate('.editorconfig'))
    .touch('.gitignore',    loadTemplate('.gitignore'))
    .touch('tsconfig.json', loadTemplate('tsconfig.json'))
    .touch('package.json',  loadTemplate('package.json'))
    .buildSpec();

  const spinner1 = ora('Generating Directories').start();
  await system.generateDirectoriesFromSpec(spec, model)
  spinner1.succeed()

  const spinner2 = ora('Installing Dependencies').start();
  spawnSync('yarn')
  spinner2.succeed()
}

function loadTemplate(filename) {
  const templateDir = join(__dirname, '..', 'templates', filename + '.template')
  return readFileSync(templateDir).toString('utf-8')
}
